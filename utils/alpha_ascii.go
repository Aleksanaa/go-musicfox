package utils

import (
	"fmt"
	"strings"
)

var alphaAscii = map[rune]string{
// blank
' ': `
        
        
        
        
        
        
        
`,
'A': `
 █████╗ 
██╔══██╗
███████║
██╔══██║
██║  ██║
╚═╝  ╚═╝
        
`,
'B': `
██████╗ 
██╔══██╗
██████╔╝
██╔══██╗
██████╔╝
╚═════╝ 
        
`,
'C': `
 ██████╗
██╔════╝
██║     
██║     
╚██████╗
 ╚═════╝
        
`,
'D': `
██████╗ 
██╔══██╗
██║  ██║
██║  ██║
██████╔╝
╚═════╝ 
        
`,
'E': `
███████╗
██╔════╝
█████╗  
██╔══╝  
███████╗
╚══════╝
        
`,
'F': `
███████╗
██╔════╝
█████╗  
██╔══╝  
██║     
╚═╝     
        
`,
'G': `
 ██████╗ 
██╔════╝ 
██║  ███╗
██║   ██║
╚██████╔╝
 ╚═════╝ 
         
`,
'H': `
██╗  ██╗
██║  ██║
███████║
██╔══██║
██║  ██║
╚═╝  ╚═╝
        
`,
'I': `
██╗
██║
██║
██║
██║
╚═╝
   
`,
'J': `
██╗     
██║     
██║     
██   ██║
╚█████╔╝
 ╚════╝ 
        
`,
'K': `
██╗  ██╗
██║ ██╔╝
█████╔╝ 
██╔═██╗ 
██║  ██╗
╚═╝  ╚═╝
        
`,
'L': `
██╗     
██║     
██║     
██║     
███████╗
╚══════╝
        
`,
'M': `
███╗   ███╗
████╗ ████║
██╔████╔██║
██║╚██╔╝██║
██║ ╚═╝ ██║
╚═╝     ╚═╝
           
`,
'N': `
███╗   ██╗
████╗  ██║
██╔██╗ ██║
██║╚██╗██║
██║ ╚████║
╚═╝  ╚═══╝
          
`,
'O': `
 ██████╗ 
██╔═══██╗
██║   ██║
██║   ██║
╚██████╔╝
 ╚═════╝ 
         
`,
'P': `
██████╗ 
██╔══██╗
██████╔╝
██╔═══╝ 
██║     
╚═╝     
        
`,
'Q': `
 ██████╗ 
██╔═══██╗
██║   ██║
██║▄▄ ██║
╚██████╔╝
 ╚══▀▀═╝ 
         
`,
'R': `
██████╗ 
██╔══██╗
██████╔╝
██╔══██╗
██║  ██║
╚═╝  ╚═╝
        
`,
'S': `
███████╗
██╔════╝
███████╗
╚════██║
███████║
╚══════╝
        
`,
'T': `
████████╗
╚══██╔══╝
   ██║   
   ██║   
   ██║   
   ╚═╝   
         
`,
'U': `
██╗   ██╗
██║   ██║
██║   ██║
██║   ██║
╚██████╔╝
 ╚═════╝ 
         
`,
'V': `
██╗   ██╗
██║   ██║
██║   ██║
╚██╗ ██╔╝
 ╚████╔╝ 
  ╚═══╝  
         
`,
'W': `
██╗    ██╗
██║    ██║
██║ █╗ ██║
██║███╗██║
╚███╔███╔╝
 ╚══╝╚══╝ 
          
`,
'X': `
██╗  ██╗
╚██╗██╔╝
 ╚███╔╝ 
 ██╔██╗ 
██╔╝ ██╗
╚═╝  ╚═╝
        
`,
'Y': `
██╗   ██╗
╚██╗ ██╔╝
 ╚████╔╝ 
  ╚██╔╝  
   ██║   
   ╚═╝   
         
`,
'Z': `
███████╗
╚══███╔╝
  ███╔╝ 
 ███╔╝  
███████╗
╚══════╝
        
`,
'0': `
 ██████╗ 
██╔═████╗
██║██╔██║
████╔╝██║
╚██████╔╝
 ╚═════╝ 
         
`,
'1': `
 ██╗
███║
╚██║
 ██║
 ██║
 ╚═╝
    
`,
'2': `
██████╗ 
╚════██╗
 █████╔╝
██╔═══╝ 
███████╗
╚══════╝
        
`,
'3': `
██████╗ 
╚════██╗
 █████╔╝
 ╚═══██╗
██████╔╝
╚═════╝ 
        
`,
'4': `
██╗  ██╗
██║  ██║
███████║
╚════██║
     ██║
     ╚═╝
        
`,
'5': `
███████╗
██╔════╝
███████╗
╚════██║
███████║
╚══════╝
        
`,
'6': `
 ██████╗ 
██╔════╝ 
███████╗ 
██╔═══██╗
╚██████╔╝
 ╚═════╝ 
         
`,
'7': `
███████╗
╚════██║
    ██╔╝
   ██╔╝ 
   ██║  
   ╚═╝  
        
`,
'8': `
 █████╗ 
██╔══██╗
╚█████╔╝
██╔══██╗
╚█████╔╝
 ╚════╝ 
        
`,
'9': `
 █████╗ 
██╔══██╗
╚██████║
 ╚═══██║
 █████╔╝
 ╚════╝ 
        
`,
'!': `
██╗
██║
██║
╚═╝
██╗
╚═╝
   
`,
'@': `
 ██████╗ 
██╔═══██╗
██║██╗██║
██║██║██║
╚█║████╔╝
 ╚╝╚═══╝ 
         
`,
'#': `
 ██╗ ██╗ 
████████╗
╚██╔═██╔╝
████████╗
╚██╔═██╔╝
 ╚═╝ ╚═╝ 
         
`,
'$': `
▄▄███▄▄ 
██╔════╝
███████╗
╚════██║
███████║
╚═▀▀▀══╝
        
`,
'%': `
██╗ ██╗
╚═╝██╔╝
  ██╔╝ 
 ██╔╝  
██╔╝██╗
╚═╝ ╚═╝
       
`,
'^': `
 ███╗ 
██╔██╗
╚═╝╚═╝
      
      
      
      
`,
'&': `
   ██╗   
   ██║   
████████╗
██╔═██╔═╝
██████║  
╚═════╝  
         
`,
'*': `
▄ ██╗▄
 ████╗
▀╚██╔▀
  ╚═╝ 
      
      
      
`,
'(': `
 ██╗
██╔╝
██║ 
██║ 
╚██╗
 ╚═╝
    
`,
')': `
██╗ 
╚██╗
 ██║
 ██║
██╔╝
╚═╝ 
    
`,
'-': `
      
█████╗
╚════╝
      
      
      
      
`,
'_': `
        
        
        
███████╗
╚══════╝
        
        
`,
'[': `
███╗
██╔╝
██║
██║
███╗
╚══╝
    
`,
']': `
███╗
╚██║
 ██║
 ██║
███║
╚══╝
    
`,
';': `
██╗
╚═╝
▄█╗
▀═╝
   
   
   
`,
':': `
██╗
╚═╝
██╗
╚═╝
   
   
   
`,
',': `
   
   
   
▄█╗
╚═╝
   
   
`,
'.': `
   
   
   
██╗
╚═╝
   
   
`,
'<': `
  ██╗
 ██╔╝
██╔╝ 
╚██╗ 
 ╚██╗
  ╚═╝
     
`,
'>': `
██╗  
╚██╗ 
 ╚██╗
 ██╔╝
██╔╝ 
╚═╝

`,
'?': `
██████╗ 
╚════██╗
  ▄███╔╝
  ▀▀══╝ 
  ██╗   
  ╚═╝   
        
`,
'/': `
    ██╗
   ██╔╝
  ██╔╝ 
 ██╔╝  
██╔╝   
╚═╝    
       
`,
}

// GetAlphaAscii get ascii string
func GetAlphaAscii(str string) string {
	upperStr := strings.ToUpper(str)

	var format [][]string
	for _, alpha := range upperStr {
		if ascii, exists := alphaAscii[alpha]; exists {
			format = append(format, strings.Split(ascii, "\n"))
		}
	}

	var lines []string
	for i := 0; i < 7; i++ {
		line := ""
		for _, item := range format {
			if i > len(item) {
				continue
			}
			line = fmt.Sprintf("%s %s", line, item[i])
		}
		lines = append(lines, line)
	}

	return strings.Join(lines, "\n")
}